module Data.Gerber.GerberAST.Skel where

-- Haskell module generated by the BNF converter

import Data.Gerber.GerberAST.Abs
import Data.Gerber.GerberAST.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transGeneric :: Generic -> Result
transGeneric x = case x of
  Generic string -> failure x
transUIdent :: UIdent -> Result
transUIdent x = case x of
  UIdent string -> failure x
transLIdent :: LIdent -> Result
transLIdent x = case x of
  LIdent string -> failure x
transCommands :: Commands -> Result
transCommands x = case x of
  Program commands -> failure x
transCommand :: Command -> Result
transCommand x = case x of
  SingleStandardCommand generic -> failure x
  SingleExtendedCommand generic -> failure x
  MultiExtendedCommands extendedcommandinsides -> failure x
transExtendedCommandInside :: ExtendedCommandInside -> Result
transExtendedCommandInside x = case x of
  Troll generic -> failure x

