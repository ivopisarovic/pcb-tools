-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Data.Gerber.Par where
import Data.Gerber.Abs
import Data.Gerber.Lex
import Data.Gerber.ErrM

}

%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pCoord Coord
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '*' { PT _ (TS _ 1) }
  '+' { PT _ (TS _ 2) }
  'X' { PT _ (TS _ 3) }

L_integ  { PT _ (TI $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }

Exp :: { Exp }
Exp : Exp '+' Exp1 { Data.Gerber.Abs.EAdd $1 $3 }
Exp1 :: { Exp }
Exp1 : Exp1 '*' Exp2 { Data.Gerber.Abs.EMul $1 $3 }
Exp2 :: { Exp }
Exp2 : Integer { Data.Gerber.Abs.EInt $1 }
Coord :: { Coord }
Coord : 'X' Exp2 { Data.Gerber.Abs.ECoord $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    t:_ -> " before `" ++ id(prToken t) ++ "'"

myLexer = tokens
}

